You are required to build a modular hospital management and display application for Wenlock Hospital using Replit. The app should address the hospital’s current problem of fragmented communication across departments such as OT (Operation Theatre), Consultation, and Pharmacy. The application must synchronize multiple key functions in real time, including the OT and Consultation token queue systems, real-time pharmacy drug inventory updates, emergency alert broadcasts, and provide distinct user interfaces for both patients and staff.

The core functionality of the app should include a live token management system where staff can update and patients can view current and upcoming queue numbers for different departments or doctors. The pharmacy module should simulate a real-time drug inventory system that updates stock levels dynamically, with alerts triggered when medicine quantities fall below a defined threshold. Additionally, the app must implement an emergency alert system that allows staff to broadcast urgent messages such as “Code Blue” or “Code Red” instantly across all connected display screens, which should visibly update the alert status in both the staff and patient views.

The app must include dual interface modes—a staff dashboard where administrative users can control token progression, update inventory, and trigger alerts, and a patient display that passively shows current tokens, doctor availability, emergency announcements, and live queue updates. The backend should simulate data synchronization between at least two modules (e.g., OT and Pharmacy), meaning changes made in one department (like drug stock updates) should reflect live in another part of the application. Use of a backend technology like Node.js or Flask is required, along with a simulated or small-scale database using JSON or SQLite.

To complete this project, submit a live Replit demo link or a video recording (3–5 minutes) of the working prototype, along with a one-page concept note describing your app’s workflow, its key components, and how it solves the hospital’s communication gaps. Also include screenshots of both the staff and patient views and a link to the full codebase hosted on GitHub or zipped and uploaded. The application must be built with modularity and future extensibility in mind, meaning each component (tokens, alerts, inventory) should be structured to work independently or plug into future systems. The UI should maintain patient privacy by avoiding full names, using only token IDs or initials, and the design must be clean, responsive, and optimized for both mobile and display screens.

